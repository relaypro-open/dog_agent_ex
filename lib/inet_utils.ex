# Generated by erl2ex (http://github.com/dazuma/erl2ex)
# From Erlang source: (Unknown source file)
# At: 2022-12-26 15:52:19


defmodule :inet_utils do

  use Bitwise, only_operators: true

  @spec inet_aton(binary()) :: pos_integer()


  def inet_aton(ip) do
    [o1Bin, o2Bin, o3Bin, o4Bin] = :binary.split(ip, ".", [:global])
    b1 = :erlang.binary_to_integer(o1Bin) <<< 24
    b2 = :erlang.binary_to_integer(o2Bin) <<< 16
    b3 = :erlang.binary_to_integer(o3Bin) <<< 8
    b4 = :erlang.binary_to_integer(o4Bin)
    b1 + b2 + b3 + b4
  end


  @spec inet_ntoa(pos_integer()) :: binary()


  def inet_ntoa(num) do
    b1 = (num &&& 4278190080) >>> 24
    b2 = (num &&& 16711680) >>> 16
    b3 = (num &&& 65280) >>> 8
    b4 = num &&& 255
    <<:erlang.integer_to_binary(b1)::binary, ".", :erlang.integer_to_binary(b2)::binary, ".", :erlang.integer_to_binary(b3)::binary, ".", :erlang.integer_to_binary(b4)::binary>>
  end


  @spec ip_between(binary(), binary(), pos_integer()) :: boolean()


  def ip_between(ip, network, networkBits) do
    ipNum = inet_aton(ip)
    netLow = inet_aton(network)
    bitsHosts = 32 - networkBits
    netHigh = netLow + :erlang.trunc(:math.pow(2, bitsHosts)) - 1
    ipNum >= netLow and ipNum <= netHigh
  end


  @spec inet_bits(binary()) :: pos_integer()


  def inet_bits(ip) do
    [o1Bin, o2Bin, o3Bin, o4Bin] = :binary.split(ip, ".", [:global])
    b1 = :erlang.binary_to_integer(o1Bin) <<< 24
    b2 = :erlang.binary_to_integer(o2Bin) <<< 16
    b3 = :erlang.binary_to_integer(o3Bin) <<< 8
    b4 = :erlang.binary_to_integer(o4Bin)
    :io.fwrite('~*.*.0s', [8, 8, :erlang.integer_to_list(b1, 2)])
    :io.fwrite('~*.*.0s', [8, 8, :erlang.integer_to_list(b2, 2)])
    :io.fwrite('~*.*.0s', [8, 8, :erlang.integer_to_list(b3, 2)])
    :io.fwrite('~*.*.0s~n', [8, 8, :erlang.integer_to_list(b4, 2)])
  end


  def mask_address(addr, maskbits) do
    b = :erlang.list_to_binary(:erlang.tuple_to_list(addr))
    rest = :erlang.size(b) * 8 - maskbits
    <<subnet::size(maskbits), _host::size(rest)>> = b
    subnet <<< maskbits
  end

end
