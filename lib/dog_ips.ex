# Generated by erl2ex (http://github.com/dazuma/erl2ex)
# From Erlang source: (Unknown source file)
# At: 2022-12-26 15:52:16


defmodule :dog_ips do

  @spec do_get_group_routing_key(:dog_state.dog_state()) :: {:ok, binary()}


  def do_get_group_routing_key(state) do
    routingKey = :dog_state.to_group_routing_key(state)
    {:ok, routingKey}
  end


  @spec do_get_host_routing_key(:dog_state.dog_state()) :: {:ok, binary()}


  def do_get_host_routing_key(state) do
    routingKey = :dog_state.to_host_routing_key(state)
    {:ok, routingKey}
  end


  @spec do_watch_interfaces(:dog_state.dog_state()) :: {:ok, :dog_state.dog_state()}


  def do_watch_interfaces(stateOld) do
    provider = :dog_state.get_provider(stateOld)
    {ec2Region, ec2InstanceId, ec2AvailabilityZone, ec2SecurityGroupIds, ec2OwnerId, ec2InstanceTags, ec2VpcId, ec2SubnetId} = :dog_interfaces.ec2_info()
    {oS_Distribution, oS_Version} = :dog_interfaces.os_info()
    hostnameOld = :dog_state.get_hostname(stateOld)
    interfacesOld = :dog_state.get_interfaces(stateOld)
    {:ok, interfacesNew} = :dog_interfaces.get_interfaces(provider, interfacesOld)
    {:ok, hostname} = :dog_interfaces.get_fqdn()
    group = :dog_state.get_group(stateOld)
    location = :dog_state.get_location(stateOld)
    environment = :dog_state.get_environment(stateOld)
    hostKey = :dog_state.get_hostkey(stateOld)
    hash4Ipsets = :dog_iptables.create_hash(:dog_iptables.read_current_ipv4_ipsets())
    hash6Ipsets = :dog_iptables.create_hash(:dog_iptables.read_current_ipv6_ipsets())
    hash4Iptables = :dog_iptables.create_hash(:dog_iptables.read_current_ipv4_iptables())
    hash6Iptables = :dog_iptables.create_hash(:dog_iptables.read_current_ipv6_iptables())
    ipsetHash = :dog_ipset.read_hash()
    {:ok, version} = :dog_app.get_version()
    updateType = :update
    stateNew = :dog_state.from_map(%{"ec2_region" => ec2Region, "ec2_availability_zone" => ec2AvailabilityZone, "ec2_instance_id" => ec2InstanceId, "ec2_owner_id" => ec2OwnerId, "ec2_security_group_ids" => ec2SecurityGroupIds, "environment" => environment, "group" => group, "hash4_ipsets" => hash4Ipsets, "hash4_iptables" => hash4Iptables, "hash6_ipsets" => hash6Ipsets, "hash6_iptables" => hash6Iptables, "hostkey" => hostKey, "interfaces" => interfacesNew, "ipset_hash" => ipsetHash, "location" => location, "name" => hostname, "os_distribution" => oS_Distribution, "os_version" => oS_Version, "provider" => provider, "updatetype" => updateType, "version" => version, "ec2_instance_tags" => ec2InstanceTags, "ec2_vpc_id" => ec2VpcId, "ec2_subnet_id" => ec2SubnetId})
    case(interfacesOld == interfacesNew) do
      false ->
        :io.format('HostnameOld, InterfacesOld: ~p, ~p', [hostnameOld, interfacesOld])
      true ->
        :ok
    end
    {:ok, stateNew}
  end


  @spec do_keepalive(:dog_state.dog_state()) :: {:ok, :dog_state.dog_state()}


  def do_keepalive(state) do
    updateType = :keepalive
    stateNew = :dog_state.set_updatetype(state, updateType)
    stateMap = :dog_state.to_map(stateNew)
    :dog_interfaces.publish_to_queue(stateMap)
    {:ok, stateNew}
  end

end
