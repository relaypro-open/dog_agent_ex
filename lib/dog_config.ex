# Generated by erl2ex (http://github.com/dazuma/erl2ex)
# From Erlang source: (Unknown source file)
# At: 2022-12-26 15:52:14


defmodule :dog_config do
  require Logger

  defmacrop erlconst_CONFIG_FILE() do
    quote do
      '/etc/dog_ex/config.json'
    end
  end


  @spec do_init_config() :: atom()


  def do_init_config() do
    var_environment = environment()
    var_location = location()
    var_group = group()
    var_hostkey = hostkey()
    :dog_turtle_sup.start_mq_services(var_environment, var_location, var_group, var_hostkey)
    :ok
  end


  @spec do_watch_config() :: atom()


  def do_watch_config() do
    var_environment = environment()
    var_location = location()
    var_group = group()
    var_hostkey = hostkey()
    :dog_turtle_sup.restart_mq_services(var_environment, var_location, var_group, var_hostkey)
    :ok
  end


  def subscriber_loop(_routingKey, _cType, payload, state) do
    proplist = :erlang.binary_to_term(payload)
    userData = :proplists.get_value(:user_data, proplist)
    config = :maps.get(:config, userData)
    var_group = :maps.get("group", config)
    var_location = :maps.get("location", config)
    var_environment = :maps.get("environment", config)
    var_hostkey = :maps.get("hostkey", config)
    :dog_agent.set_group(var_group)
    :dog_agent.set_location(var_location)
    :dog_agent.set_environment(var_environment)
    :dog_agent.set_hostkey(var_hostkey)
    write_config_file(var_group, var_location, var_environment, var_hostkey)
    :dog_turtle_sup.restart_mq_services(var_environment, var_location, var_group, var_hostkey)
    {:ack, state}
  end


  @spec write_config_file(_, _, _, _) :: :ok when _: any()


  def write_config_file(var_group, var_location, var_environment, var_hostkey) do
    configMap = %{group: var_group, location: var_location, environment: var_environment, hostkey: var_hostkey}
    :ok = :file.write_file(erlconst_CONFIG_FILE(), :jsx.encode(configMap))
    :ok
  end


  @spec read_config_file() :: {:ok, map()} | atom()


  def read_config_file() do
    case(:file.read_file(erlconst_CONFIG_FILE())) do
      {:ok, configJson} ->
        {:ok, :jsx.decode(configJson, [:return_maps])}
      _ ->
        :file_read_error
    end
  end


  @spec get_config() :: any()


  def get_config() do
    configMap = case(:dog_config.read_config_file()) do
      {:ok, map} ->
        map
      :file_read_error ->
        %{"group" => "", "location" => "", "environment" => "", "hostkey" => ""}
    end
    configMap
  end


  defp map_to_routing_key(configMap) do
    :binary.list_to_bin([:maps.get("environment", configMap), ".", :maps.get("location", configMap), ".", :maps.get("group", configMap), ".", :maps.get("hostkey", configMap)])
  end


  def routing_key() do
    configMap = get_config()
    routingKey = map_to_routing_key(configMap)
    routingKey
  end


  def environment() do
    configMap = get_config()
    var_environment = :maps.get("environment", configMap, "*")
    var_environment
  end


  def location() do
    configMap = get_config()
    var_location = :maps.get("location", configMap, "*")
    var_location
  end


  def group() do
    configMap = get_config()
    var_group = :maps.get("group", configMap, "")
    var_group
  end


  def hostkey() do
    configMap = get_config()
    var_hostkey = :maps.get("hostkey", configMap, "")
    var_hostkey
  end

end
