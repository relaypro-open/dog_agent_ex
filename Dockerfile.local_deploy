# Build stage 0
FROM elixir:1.14 as base
RUN apt-get update &&  apt-get install -y libcap-dev iptables ipset less ack lsb-release vim jq curl dnsutils netcat
RUN mkdir -p /opt/dog_ex
RUN mkdir -p /etc/dog_ex
RUN mkdir -p /etc/iptables
RUN mkdir -p /var/log/dog_ex
RUN mkdir -p /home/dog/bin
RUN cp /usr/sbin/ipset /home/dog/bin/ipset
RUN cp /usr/sbin/iptables-save /home/dog/bin/
RUN cp /usr/sbin/ip6tables-save /home/dog/bin/
RUN cp /usr/sbin/iptables-restore /home/dog/bin/
RUN cp /usr/sbin/ip6tables-restore /home/dog/bin/
RUN ls -latr /opt/dog_ex
RUN mkdir /etc/rabbitmq
COPY csc_certs.sh /etc/rabbitmq/ 
RUN mkdir -p /etc/dog_ex/certs \
	&& mkdir -p /etc/dog_ex/private \
	&& chmod 700 /etc/dog_ex/private
RUN ln -s /usr/bin/python3 /usr/bin/python

#Set working directory
RUN mkdir /data
WORKDIR /data

ENV MIX_ENV=dev
COPY mix.exs .
COPY mix.lock .
RUN mix local.hex --force
RUN mix local.rebar --force
RUN mix deps.get
RUN mix deps.compile

WORKDIR /data
COPY lib lib
RUN mix compile
#Build the release
COPY config/config.exs config/
COPY config/runtime.dev.exs config/runtime.exs
COPY config/dot_env.dev.config /etc/dog_ex/dot_env.config
COPY config/config.json.dev /etc/dog_ex/config.json
RUN mix release dog

# Install the released application
RUN mv /data/_build/dev/rel/dog/* /opt/dog_ex/

CMD /bin/bash -c "/etc/rabbitmq/csc_certs.sh" && /bin/bash -c "/opt/dog_ex/bin/dog start"
#CMD /bin/bash -c "/etc/rabbitmq/csc_certs.sh" && /bin/bash -c "sleep infinity"
